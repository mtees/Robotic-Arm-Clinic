import socket
import threading
import json
import time
import pandas as pd
import numpy as np
import socket

# from interbotix_xs_modules.arm import InterbotixManipulatorXS
# Rob = InterbotixManipulatorXS("px150", "arm", "gripper") # create robot object

HEADER = 64  # set header?
PORT = 8884  # set server port

# ip address
hostname = socket.gethostname()
## getting the IP address using socket.gethostbyname() method
ip_address = socket.gethostbyname(hostname)
## printing the hostname and ip_address
print(f"Hostname: {hostname}")
print(f"IP Address: {ip_address}")
SERVER = ip_address  # set server IPv4

ADDR = (SERVER, PORT)  # create address out of server and port
FORMAT = 'utf-8'  # set text format
DISCONNECT_MESSAGE = "DISCONNECT"
msg_Queue = []  # values are received at 18 frames a second when list row size is 3, queue size is 3 seconds
parsed_Queue = []
global total_array
total_array = pd.DataFrame()

server = socket.socket(socket.AF_INET,
                       socket.SOCK_STREAM)  # create a server with IPv4 (AF_INET) and stream socket (SOCK_STREAM)
server.bind(ADDR)  # bind the created server to the defined address


def handle_client(conn, addr):
    global i
    print("[NEW CONNECTION] {0} connected.".format(ADDR))
    connected = True
    while connected:
        msg_length = conn.recv(HEADER).decode(FORMAT)  # receive up to 64 (HEADER) bytes of data and decode as UTF-8
        if msg_length:  # check if data was received
            msg_length = int(msg_length)  # convert the msg_length to integer
            msg = conn.recv(msg_length).decode(FORMAT)  # receive data for the msg_length and decode as UTF-8
            msg = json.loads(msg)  # convert the msg from JSON string to python dict
            print(msg)
            # disconnect
            if msg == DISCONNECT_MESSAGE:  # check if the message is to disconnect
                connected = False  # break the loop

            # setting the components to the data received from the msg
            received_time = time.time()
            msg.append(received_time)  # Store msg and received_time as a tuple in msg_Queue
            print(msg)
            msg_Queue.append(msg)  # append the message with time data to the end of the msg_Queue

            # print("[{0}] {1}".format(ADDR, msg))
            conn.send("Msg received".encode(FORMAT))  # send "Msg received" to the socket

            # sends array to csv file (change to next test when doing multiple test runs)
            total_array.to_csv('video_test_LIFO.csv', sep=',')

    conn.close()


def start():
    server.listen(-1)
    print("[LISTENING] Server is listening on {0}".format(SERVER))
    while True:
        conn, addr = server.accept()  # Accept a connection. The socket must be bound to an address and listening for connections. The return value is a pair (conn, address) where conn is a new socket object usable to send and receive data on the connection, and address is the address bound to the socket on the other end of the connection.
        thread_connection = threading.Thread(target=handle_client,
                                             args=(conn, addr))  # starts a thread which runs handle_client
        thread_received = threading.Thread(target=received_data)  # starts a thread which runs received_data
        # thread_parsed = threading.Thread(target = parsed_data) # starts a thread which runs parsed_data
        print("[ACTIVE CONNECTIONS] {0}".format(threading.activeCount() - 1))  # print the number of active threads - 1
        thread_connection.start()  # start the threads
        thread_received.start()
        # thread_parsed.start()
        thread_connection.join()  # convert to string
        thread_received.join()
        # thread_parsed.join()


# thread to receive data and unpackage it correctly (average or non-average)
def received_data():
    stop = False
    while not stop:
        print("test while")
        x = 0
        try:
            print("test try")

            # grabs the array out of the msgQueue
            msgData = msg_Queue.pop()
            del msg_Queue[:]
            print("test 1")
            print(msgData)

            # Unpack msgData into msg and received_time
            msg, received_time = msgData[0], msgData[1]

            # changes the msg data into an array
            msgArray = np.array(msgData)
            print("test 2")
            print(msgArray)

            # retrieves the sent time and received time and finds the delay time
            sentTime = msgData[len(msgData) - 3]
            #sentTime = float(sentTime)
            print(type(sentTime))
            packageCreationTime = msgData[len(msgData) - 2]
            receivedTime = msgData[len(msgData) - 1]
            delayTime = receivedTime - sentTime
            print("test 3")
            print(msgArray)
            print("delay time: ", delayTime)

            # (#,) = how many packets are being receieved + 1 (so for 9 values arrays received, enter 10), (,#) = how many values per array we want to recreate
            msgArray = msgArray[:len(msgData) - 3]
            print("msg array:")
            print(msgArray)
            reshapedArray = msgArray.reshape(10, 6)
            print("reshaped array:")
            print(reshapedArray)
            reshapedArray = np.delete(reshapedArray, 0, axis=0)  # removes the first array, which is just 0's
            print("test 4")

             # grabs each x, y, z, roll, and grab from each packet and append them to the queue
            for x in range(8):
                parsedData = [reshapedArray[x][0], reshapedArray[x][1], reshapedArray[x][2], reshapedArray[x][3],
                              reshapedArray[x][4], reshapedArray[x][5], delayTime, receivedTime, packageCreationTime]
                parsed_Queue.append(parsedData)

            stop = True

        except IndexError:
            print("test except")
            # adds a small buffer to prevent overlapping movements
            time.sleep(0.000001)
            pass


def parsed_data():
    global total_array
    while True:
        # try to execute the code, if error, pass and do function again
        try:
            # takes the first out of the parsed_Queue and sends it to the robot, then deletes the rest of the queue values
            parsedData = parsed_Queue.pop()
            del parsed_Queue[:]
            parsedData = parsedData.join()
        except IndexError:
            pass

print("[STARTING] Server is starting...")
start()
